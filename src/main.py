import asyncio
from aiogram import html
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.formatting import Text, Bold, Italic, Code, Underline, Spoiler
import aiohttp
from aiogram.types import FSInputFile, InputMediaPhoto
from aiogram.enums import ParseMode
import config
from base import SQL
import logging
from datetime import datetime
import re
import subprocess
from aiogram.filters import Command
from colorama import just_fix_windows_console
import sys
from threading import Thread
import os
from pathlib import Path
import json

just_fix_windows_console()

SUPPORT_CHAT_ID = config.chat_id
db = SQL('db.db')
logger = logging.getLogger(__name__)
bot = Bot(token=config.TOKEN)
dp = Dispatcher()

images_dir = Path("images")
images_dir.mkdir(exist_ok=True)

logging.basicConfig(level=logging.INFO)

# Discord Proxy
discord_proxy_path = r"discord-proxy\discord.bat"
if config.USE_PROXY == True:
    print('\033[35m[discord-proxy] [INIT]\033[0m Loading proxies...')


def log_output(pipe, prefix, color_code):
    for line in iter(pipe.readline, ''):
        print(f"\033[{color_code}m{prefix}\033[0m {line.strip()}")
    pipe.close()


def run_with_logging(bat_file):
    process = subprocess.Popen(
        bat_file,
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        bufsize=1,
        encoding='cp866'
    )

    Thread(target=log_output, args=(process.stdout, "[discord-proxy] [INFO]", "36")).start()
    Thread(target=log_output, args=(process.stderr, "[discord-proxy] [ERROR]", "31")).start()

    return process

if config.USE_PROXY == True:
    proxy_process = run_with_logging(discord_proxy_path)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb_main = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìÖ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="new_message")],
    [InlineKeyboardButton(text="üìã –ú–æ–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="my_messages")],
    [InlineKeyboardButton(text="ü§∑‚Äç‚ôÄÔ∏è –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
])

platform_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="Telegram", callback_data="platform_telegram")],
    [InlineKeyboardButton(text="Discord", callback_data="platform_discord")]
])

message_type_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ", callback_data="message_type_recurring")],
    [InlineKeyboardButton(text="‚è∞ –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ", callback_data="message_type_one_time")]
])

image_confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_image_yes")],
    [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="add_image_no")]
])

buttons_confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_buttons_yes")],
    [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="add_buttons_no")]
])

feedback_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="feedback_yes")],
    [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="feedback_no")]
])

feedback_reply_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="reply_feedback")]
])


def get_days_keyboard(selected_days=None):
    if selected_days is None:
        selected_days = {}

    days = [
        ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "monday"),
        ("–í—Ç–æ—Ä–Ω–∏–∫", "tuesday"),
        ("–°—Ä–µ–¥–∞", "wednesday"),
        ("–ß–µ—Ç–≤–µ—Ä–≥", "thursday"),
        ("–ü—è—Ç–Ω–∏—Ü–∞", "friday"),
        ("–°—É–±–±–æ—Ç–∞", "saturday"),
        ("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "sunday")
    ]

    keyboard = []
    row = []

    for day_name, day_code in days:
        if selected_days.get(day_code, False):
            emoji = "‚úÖ"
        else:
            emoji = "‚ùå"

        button = InlineKeyboardButton(
            text=f"{emoji} {day_name}",
            callback_data=f"toggle_{day_code}"
        )
        row.append(button)

        if len(row) == 2:
            keyboard.append(row)
            row = []

    if row:
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton(text="üîπ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="confirm_days")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def check_bot_access(bot: Bot, chat_id: int) -> bool:
    try:
        await bot.send_chat_action(chat_id, 'typing')
        return True
    except Exception as e:
        return False


@dp.message(Command("start"))
async def start(message: Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ feedback –≤ –∫–æ–º–∞–Ω–¥–µ /start
    if len(message.text.split()) > 1 and message.text.split()[1].startswith('feedback_'):
        creator_id = int(message.text.split('_')[1])
        db.update_user_data(
            user_id=message.from_user.id,
            current_state="feedback_message_input",
            feedback_creator_id=creator_id
        )
        await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:")
        return

    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id, message.from_user.full_name)
        db.update_field('users', message.from_user.id, 'support_status', 0)
        db.update_field('users', message.from_user.id, 'support_target_user', None)

    db.update_user_data(
        user_id=message.from_user.id,
        current_state="main_menu",
        platform=None,
        message_type=None,
        text=None,
        original_text=None,
        time=None,
        date=None,
        chat_id=None,
        webhook=None,
        image_file_id=None,
        feedback=None,
        feedback_button_text=None,
        feedback_creator_id=None,
        feedback_reply_user_id=None,
        buttons=None,
        selected_days=None
    )

    await message.answer(
        "üì® –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ Telegram –∏ Discord",
        reply_markup=kb_main
    )


@dp.message(Command("id"))
async def get_chat_id(message: Message):
    await message.reply(f'–í–æ—Ç ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{message.chat.id}`', parse_mode=ParseMode.MARKDOWN_V2)


@dp.callback_query(F.data == "my_messages")
async def show_my_messages(callback: CallbackQuery):
    user_id = callback.from_user.id

    tg_messages = db.get_user_telegram_messages(user_id)
    discord_messages = db.get_user_discord_messages(user_id)

    if not tg_messages and not discord_messages:
        await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")
        return

    await callback.message.answer("üìã –í–∞—à–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:")

    for msg in tg_messages:
        text = format_message_info(msg, "Telegram")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_tg_{msg['id']}")]
        ])
        try:
            if msg.get('image'):
                image_path = images_dir / msg['image']
                with open(image_path, 'rb') as photo:
                    await callback.message.answer_photo(
                        photo=types.BufferedInputFile(photo.read(), filename=msg['image']),
                        caption=text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=keyboard
                    )
            else:
                await callback.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard)

    for msg in discord_messages:
        text = format_message_info(msg, "Discord")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_discord_{msg['id']}")]
        ])
        await callback.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard)

    await callback.answer()


def format_message_info(msg, platform):
    text = f"<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform}\n"
    text += f"<b>–¢–∏–ø:</b> {'–†–µ–≥—É–ª—è—Ä–Ω–æ–µ' if not msg['date'] else '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ'}\n"
    text += f"<b>–í—Ä–µ–º—è:</b> {msg['time']}\n"

    if msg['date']:
        text += f"<b>–î–∞—Ç–∞:</b> {msg['date']}\n"
    else:
        active_days = []
        if msg['onMondays']: active_days.append("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
        if msg['onTuesdays']: active_days.append("–í—Ç–æ—Ä–Ω–∏–∫")
        if msg['onWednesdays']: active_days.append("–°—Ä–µ–¥–∞")
        if msg['onThursdays']: active_days.append("–ß–µ—Ç–≤–µ—Ä–≥")
        if msg['onFridays']: active_days.append("–ü—è—Ç–Ω–∏—Ü–∞")
        if msg['onSaturdays']: active_days.append("–°—É–±–±–æ—Ç–∞")
        if msg['onSundays']: active_days.append("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
        if active_days:
            text += f"<b>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</b> {', '.join(active_days)}\n"

    if platform == "Telegram":
        preview_chat_id = str(msg['chat_id'])
        text += f"<b>ID —á–∞—Ç–∞:</b> {html.quote(preview_chat_id)}\n"
    else:
        text += f"<b>Webhook:</b> {msg['webhook'][:20]}...\n"

    preview_length = 100
    message_text = re.sub(r'<[^>]+>', '', msg['text'])
    if len(message_text) > preview_length:
        preview_text = f'{message_text[:preview_length]}...'
    else:
        preview_text = message_text

    text += f"<b>–¢–µ–∫—Å—Ç:</b>\n<code>{html.quote(preview_text)}</code>"

    if msg.get('buttons'):
        buttons = msg['buttons']
        if isinstance(buttons, str):
            try:
                buttons = json.loads(buttons)
            except json.JSONDecodeError:
                buttons = None

        if buttons and isinstance(buttons, list):
            buttons_preview = []
            for btn in buttons:
                if isinstance(btn, dict):
                    btn_text = btn.get('text', '')
                    btn_url = btn.get('url', '–∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏')
                    buttons_preview.append(f"{btn_text} - {btn_url}")

            if buttons_preview:
                text += f"\n<b>–ö–Ω–æ–ø–∫–∏:</b>\n<code>{html.quote('\n'.join(buttons_preview))}</code>"

    return text


@dp.callback_query(F.data.startswith("close_"))
async def close_support(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    db.update_field('users', user_id, 'support_status', 0)
    await callback.message.delete()
    await callback.answer()


@dp.callback_query(F.data.startswith("answer_"))
async def reply_to_user(callback: CallbackQuery):
    admin_id = callback.from_user.id
    user_id = int(callback.data.split("_")[1])

    db.update_field('users', admin_id, 'support_status', 2)
    db.update_field('users', admin_id, 'support_target_user', user_id)

    await callback.message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):")
    await callback.answer()


@dp.callback_query(F.data.startswith("delete_tg_"))
async def delete_telegram_message(callback: CallbackQuery):
    message_id = int(callback.data.split("_")[2])
    db.delete_telegram_message(message_id)
    await callback.message.delete()
    await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")


@dp.callback_query(F.data.startswith("delete_discord_"))
async def delete_discord_message(callback: CallbackQuery):
    message_id = int(callback.data.split("_")[2])
    db.delete_discord_message(message_id)
    await callback.message.delete()
    await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")


@dp.callback_query(F.data == "new_message")
async def new_message(callback: CallbackQuery):
    db.update_user_data(
        user_id=callback.from_user.id,
        current_state="platform_selection"
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=platform_keyboard)
    await callback.answer()


@dp.callback_query(F.data.startswith("platform_"))
async def process_platform(callback: CallbackQuery):
    platform = callback.data.split("_")[1]
    db.update_user_data(
        user_id=callback.from_user.id,
        current_state="message_type_selection",
        platform=platform
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=message_type_keyboard)
    await callback.answer()


@dp.callback_query(F.data.startswith("message_type_"))
async def process_message_type(callback: CallbackQuery):
    message_type = callback.data.split("_")[2]
    db.update_user_data(
        user_id=callback.from_user.id,
        current_state="text_input",
        message_type=message_type
    )
    await callback.message.edit_text(
        "‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n\n"
        "<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> - **—Ç–µ–∫—Å—Ç**\n"
        "<i>–ù–∞–∫–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</i> - _—Ç–µ–∫—Å—Ç_\n"
        "<u>–ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</u> - __—Ç–µ–∫—Å—Ç__\n"
        "<s>–ó–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</s> - ~—Ç–µ–∫—Å—Ç~\n"
        "<code>–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</code> - `—Ç–µ–∫—Å—Ç`\n"
        "<pre>–ë–ª–æ–∫ –∫–æ–¥–∞</pre> - ```–∫–æ–¥```\n"
        "–°–ø–æ–π–ª–µ—Ä - ||—Ç–µ–∫—Å—Ç||\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML —Ç–µ–≥–∏: &lt;b&gt;, &lt;i&gt;, &lt;u&gt;, &lt;s&gt;, &lt;code&gt;, &lt;pre&gt;\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º:",
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@dp.message(F.text)
async def handle_text(message: Message):
    user_data = db.get_user_data(message.from_user.id)
    user_id = message.from_user.id
    support_status = db.get_field('users', user_id, 'support_status')

    # –†–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if support_status == 1:
        kb_admin = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{user_id}")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"close_{user_id}")]
        ])
        await bot.send_message(
            chat_id=SUPPORT_CHAT_ID,
            text=f"üë§ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} (ID: {user_id}):</b>\n\n{message.text}",
            parse_mode=ParseMode.HTML,
            reply_markup=kb_admin
        )
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!")
        db.update_field('users', user_id, 'support_status', 0)
        return
    elif support_status == 2:
        target_user_id = db.get_field('users', user_id, 'support_target_user')
        if target_user_id:
            try:
                kb_answer = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="support")]
                ])
                await bot.send_message(
                    chat_id=target_user_id,
                    text=f"üì© <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{message.text}",
                    parse_mode=ParseMode.HTML, reply_markup=kb_answer
                )
                await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {target_user_id})")
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        db.update_field('users', user_id, 'support_status', 0)
        db.update_field('users', target_user_id, 'support_status', 0)
        return

    if not user_data:
        await start(message)
        return

    current_state = user_data.get('current_state')
    if current_state == "feedback_message_input":
        await process_feedback_message(message)
        return
    elif current_state == "feedback_reply_input":
        await process_feedback_reply(message)
        return
    elif current_state == "text_input":
        await process_text(message)
    elif current_state == "feedback_text_input":
        await process_feedback_button_text(message)
    elif current_state == "time_input":
        await process_time(message)
    elif current_state == "date_input":
        await process_date(message)
    elif current_state == "chat_link_input":
        await process_chat_link(message)
    elif current_state == "webhook_input":
        await process_webhook(message)
    elif current_state == "buttons_input":
        await process_buttons_text(message)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=kb_main)


async def process_text(message: Message):
    original_text = message.text if message.content_type == types.ContentType.TEXT else message.caption or ""
    html_text = message.html_text if message.content_type == types.ContentType.TEXT else message.html_caption or original_text

    db.update_user_data(
        user_id=message.from_user.id,
        current_state="image_choice",
        text=html_text,
        original_text=original_text
    )
    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?", reply_markup=image_confirm_keyboard)


@dp.callback_query(F.data.startswith("add_image_"))
async def process_image_choice(callback: CallbackQuery):
    user_data = db.get_user_data(callback.from_user.id)
    if not user_data or user_data['current_state'] != "image_choice":
        await callback.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    if callback.data == "add_image_yes":
        db.update_user_data(
            user_id=callback.from_user.id,
            current_state="image_upload"
        )
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 1):")
    else:
        db.update_user_data(
            user_id=callback.from_user.id,
            current_state="buttons_choice"
        )
        await callback.message.edit_text("üëÄ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n" + user_data['text'],
                                         parse_mode=ParseMode.HTML)
        await process_buttons_after_image(callback.message, callback.from_user.id)
    await callback.answer()


async def process_buttons_after_image(message: Message, user_id: int):
    db.update_user_data(
        user_id=user_id,
        current_state="buttons_choice"
    )
    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é? (–º–∞–∫—Å–∏–º—É–º 5)",
                         reply_markup=buttons_confirm_keyboard)


@dp.message(F.photo)
async def process_image(message: Message):
    user_data = db.get_user_data(message.from_user.id)
    if not user_data or user_data['current_state'] != "image_upload":
        return

    photo = message.photo[-1]
    file_id = photo.file_id

    db.update_user_data(
        user_id=message.from_user.id,
        current_state="buttons_choice",
        image_file_id=file_id
    )

    preview_text = "üëÄ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n" + user_data['text']

    try:
        await message.answer_photo(photo.file_id, caption=preview_text, parse_mode=ParseMode.HTML)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–∏–Ω—è—Ç–æ.")

    await process_buttons_after_image(message, message.from_user.id)


@dp.callback_query(F.data.startswith("add_buttons_"))
async def process_buttons_choice(callback: CallbackQuery):
    user_data = db.get_user_data(callback.from_user.id)
    if not user_data or user_data['current_state'] != "buttons_choice":
        await callback.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    if callback.data == "add_buttons_yes":
        db.update_user_data(
            user_id=callback.from_user.id,
            current_state="buttons_input"
        )
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏1 - URL1\n"
            "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏2 - URL2\n\n"
            "–ú–∞–∫—Å–∏–º—É–º 5 –∫–Ω–æ–ø–æ–∫. –ü—Ä–∏–º–µ—Ä:\n"
            "–ù–∞—à —Å–∞–π—Ç - https://example.com\n"
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è - https://example.com/docs"
        )
    else:
        if user_data['message_type'] == "recurring":
            db.update_user_data(
                user_id=callback.from_user.id,
                current_state="days_selection",
                selected_days=json.dumps({})
            )
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –∫–æ–≥–¥–∞ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                reply_markup=get_days_keyboard()
            )
        else:
            db.update_user_data(
                user_id=callback.from_user.id,
                current_state="feedback_choice"
            )
            await callback.message.edit_text("–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏?",
                                             reply_markup=feedback_keyboard)
    await callback.answer()


async def process_buttons_text(message: Message):
    user_data = db.get_user_data(message.from_user.id)
    if not user_data or user_data['current_state'] != "buttons_input":
        return

    buttons_text = message.text.strip()
    buttons = []
    errors = []

    for line in buttons_text.split('\n'):
        if '-' in line:
            text, url = line.split('-', 1)
            text = text.strip()
            url = url.strip()

            if not text or not url:
                errors.append(f"–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∏–ª–∏ URL –≤ —Å—Ç—Ä–æ–∫–µ: {line}")
                continue

            if not url.startswith(('http://', 'https://')):
                errors.append(f"URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https:// –≤ —Å—Ç—Ä–æ–∫–µ: {line}")
                continue

            buttons.append({'text': text, 'url': url})

            if len(buttons) >= 5:
                break

    if errors:
        error_msg = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:\n\n" + "\n".join(errors)
        await message.answer(error_msg + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–æ–≤–∞:")
        return

    db.update_user_data(
        user_id=message.from_user.id,
        buttons=json.dumps(buttons) if buttons else None
    )

    if buttons:
        buttons_preview = "\n".join([f"{btn['text']} - {btn['url']}" for btn in buttons])
        if user_data['message_type'] == "recurring":
            db.update_user_data(
                user_id=message.from_user.id,
                current_state="days_selection",
                selected_days=json.dumps({})
            )
            await message.answer(f"‚úÖ –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n\n{buttons_preview}\n\n"
                                 "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –∫–æ–≥–¥–∞ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                                 reply_markup=get_days_keyboard())
        else:
            db.update_user_data(
                user_id=message.from_user.id,
                current_state="feedback_choice"
            )
            await message.answer(f"‚úÖ –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n\n{buttons_preview}\n\n"
                                 "–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏?",
                                 reply_markup=feedback_keyboard)
    else:
        if user_data['message_type'] == "recurring":
            db.update_user_data(
                user_id=message.from_user.id,
                current_state="days_selection",
                selected_days=json.dumps({})
            )
            await message.answer("–ö–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –∫–æ–≥–¥–∞ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                                 reply_markup=get_days_keyboard())
        else:
            db.update_user_data(
                user_id=message.from_user.id,
                current_state="feedback_choice"
            )
            await message.answer("–ö–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏?",
                                 reply_markup=feedback_keyboard)


@dp.callback_query(F.data.startswith("toggle_"))
async def toggle_day_selection(callback: CallbackQuery):
    user_data = db.get_user_data(callback.from_user.id)
    if not user_data or user_data['current_state'] != "days_selection":
        await callback.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    selected_days = json.loads(user_data['selected_days']) if user_data['selected_days'] else {}
    day_code = callback.data.split("_")[1]

    selected_days[day_code] = not selected_days.get(day_code, False)

    db.update_user_data(
        user_id=callback.from_user.id,
        selected_days=json.dumps(selected_days)
    )

    await callback.message.edit_reply_markup(
        reply_markup=get_days_keyboard(selected_days)
    )
    await callback.answer()


@dp.callback_query(F.data == "confirm_days")
async def confirm_days_selection(callback: CallbackQuery):
    user_data = db.get_user_data(callback.from_user.id)
    if not user_data or user_data['current_state'] != "days_selection":
        await callback.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    selected_days = json.loads(user_data['selected_days']) if user_data['selected_days'] else {}

    if not any(selected_days.values()):
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å!", show_alert=True)
        return

    db.update_user_data(
        user_id=callback.from_user.id,
        current_state="feedback_choice"
    )
    await callback.message.edit_text("–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏?",
                                     reply_markup=feedback_keyboard)
    await callback.answer()


@dp.callback_query(F.data.startswith("feedback_"))
async def process_feedback_choice(callback: CallbackQuery):
    user_data = db.get_user_data(callback.from_user.id)

    if not user_data:
        await callback.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    if callback.data == "feedback_yes":
        db.update_user_data(
            user_id=callback.from_user.id,
            current_state="feedback_text_input",
            feedback=True
        )
        await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"):')
    else:
        db.update_user_data(
            user_id=callback.from_user.id,
            current_state="time_input",
            feedback=False
        )
        ctime = datetime.now().strftime('%H:%M')
        await callback.message.edit_text(f"–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n(—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ‚Äî {ctime}):")
    await callback.answer()


async def process_feedback_button_text(message: Message):
    db.update_user_data(
        user_id=message.from_user.id,
        current_state="time_input",
        feedback_button_text=message.text
    )
    ctime = datetime.now().strftime('%H:%M')
    await message.answer(f"–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n(—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ‚Äî {ctime}):")


async def process_time(message: Message):
    if not re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        return

    user_data = db.get_user_data(message.from_user.id)
    db.update_user_data(
        user_id=message.from_user.id,
        time=message.text
    )
    if user_data['message_type'].startswith('one'):
        db.update_user_data(
            user_id=message.from_user.id,
            current_state="date_input"
        )
        cdate = datetime.now().strftime('%d.%m.%Y')
        await message.answer(f"–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n(—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ ‚Äî {cdate}):")
        return
    else:
        if user_data['platform'] == "telegram":
            db.update_user_data(
                user_id=message.from_user.id,
                current_state="chat_link_input"
            )
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ:\n"
                f"- –ß–∏—Å–ª–æ–≤–æ–π ID —á–∞—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -)\n"
                f"- –ò–º—è –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, –Ω–∞–ø—Ä–∏–º–µ—Ä @mychannel)\n\n"
                f"–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID:\n"
                f"1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª\n"
                f"2. –î–ª—è —á–∞—Ç–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /id –≤ —á–∞—Ç–µ\n"
                f"3. –î–ª—è –∫–∞–Ω–∞–ª–æ–≤: —É–∫–∞–∂–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞",
                parse_mode=ParseMode.HTML
            )
        else:
            db.update_user_data(
                user_id=message.from_user.id,
                current_state="webhook_input"
            )
            await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –≤–µ–±—Ö—É–∫–∞ Discord:")


async def process_date(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –ø–∞—Ä—Å–∏—Ç—Å—è
        datetime.strptime(message.text, "%d.%m.%Y")
        db.update_user_data(
            user_id=message.from_user.id,
            date=message.text
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return

    user_data = db.get_user_data(message.from_user.id)
    db.update_user_data(
        user_id=message.from_user.id,
        date=message.text
    )

    if user_data['platform'] == "telegram":
        db.update_user_data(
            user_id=message.from_user.id,
            current_state="chat_link_input"
        )
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ:\n"
            f"- –ß–∏—Å–ª–æ–≤–æ–π ID —á–∞—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -)\n"
            f"- –ò–º—è –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, –Ω–∞–ø—Ä–∏–º–µ—Ä @mychannel)\n\n"
            f"–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID:\n"
            f"1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª\n"
            f"2. –î–ª—è —á–∞—Ç–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /id –≤ —á–∞—Ç–µ\n"
            f"3. –î–ª—è –∫–∞–Ω–∞–ª–æ–≤: —É–∫–∞–∂–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞",
            parse_mode=ParseMode.HTML
        )
    else:
        db.update_user_data(
            user_id=message.from_user.id,
            current_state="webhook_input"
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –≤–µ–±—Ö—É–∫–∞ Discord:")


async def process_chat_link(message: Message):
    user_data = db.get_user_data(message.from_user.id)
    if not user_data or user_data['current_state'] != "chat_link_input":
        return

    input_text = message.text.strip()
    chat_id = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞
    if input_text.startswith('-') and input_text[1:].isdigit():
        chat_id = input_text
    elif input_text.startswith('@'):
        try:
            chat = await bot.get_chat(input_text)
            chat_id = str(chat.id)
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª {input_text}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                                 "1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                                 "2. –í—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞")
            return
    else:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ:\n"
            "- –ß–∏—Å–ª–æ–≤–æ–π ID —á–∞—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -)\n"
            "- –ò–º—è –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)\n\n"
            "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID:\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª\n"
            "2. –î–ª—è —á–∞—Ç–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /id",
            parse_mode=ParseMode.HTML
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
    try:
        chat = await bot.get_chat(chat_id)
        member = await bot.get_chat_member(chat_id, bot.id)

        if chat.type == 'channel':
            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if member.status != 'administrator':
                await message.answer("‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!")
                return

        elif chat.type in ['group', 'supergroup']:
            # –î–ª—è –≥—Ä—É–ø–ø –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –±—ã–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏ –Ω–µ –±—ã–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
            if member.status == 'restricted':
                await message.answer("‚ùå –£ –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
                return
            elif member.status in ['left', 'kicked']:
                await message.answer("‚ùå –ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏–ª–∏ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω!")
                return

        elif chat.type == 'private':
            # –î–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            pass

    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {str(e)}\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª\n"
            "2. –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ - –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )
        return

    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    db.update_user_data(
        user_id=message.from_user.id,
        chat_id=chat_id
    )
    await save_message(message)


async def process_webhook(message: Message):
    user_data = db.get_user_data(message.from_user.id)
    if not user_data or user_data['current_state'] != "webhook_input":
        return

    webhook = message.text.strip()
    if not (webhook.startswith("https://") and "discord.com/api/webhooks" in webhook):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ–±—Ö—É–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL")
        return

    db.update_user_data(
        user_id=message.from_user.id,
        webhook=webhook
    )
    await save_message(message)


async def save_message(message: Message):
    user_data = db.get_user_data(message.from_user.id)
    if not user_data:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    html_text = user_data['text']
    original_text = user_data.get('original_text', html_text)
    buttons = json.loads(user_data['buttons']) if user_data['buttons'] else []

    if user_data.get('feedback', False):
        feedback_button_text = user_data.get('feedback_button_text', "üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
        if user_data['platform'] == "telegram":
            buttons.append({
                "text": feedback_button_text,
                "url": f"https://t.me/{config.BOT_USERNAME}?start=feedback_{message.from_user.id}"
            })
        else:
            buttons.append({
                "text": feedback_button_text,
                "callback_data": f"user_feedback_{message.from_user.id}"
            })

    if user_data['platform'] == "telegram":
        formatted_text = html_text
    else:
        formatted_text = original_text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_data['message_type'] == "one_time" and user_data.get("date"):
        try:
            date_obj = datetime.strptime(user_data["date"], "%d.%m.%Y")
            days_params = {
                'onMondays': 0,
                'onTuesdays': 0,
                'onWednesdays': 0,
                'onThursdays': 0,
                'onFridays': 0,
                'onSaturdays': 0,
                'onSundays': 0,
            }
        except:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã. –°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
            db.clear_user_data(message.from_user.id)
            return
    else:
        days_params = {
            'onMondays': 0,
            'onTuesdays': 0,
            'onWednesdays': 0,
            'onThursdays': 0,
            'onFridays': 0,
            'onSaturdays': 0,
            'onSundays': 0,
        }

    common_data = {
        "id_user": message.from_user.id,
        "msg": formatted_text,
        "name_user": message.from_user.full_name,
        "time": user_data["time"],
        "date": user_data.get("date", ""),
        "buttons": buttons if buttons else None,
        **days_params
    }

    if user_data["platform"] == "telegram":
        db.add_msg_telegram(
            id_user=common_data["id_user"],
            id_chat=user_data["chat_id"],
            msg=common_data["msg"],
            name_user=common_data["name_user"],
            time=common_data["time"],
            date=common_data["date"],
            buttons=common_data["buttons"],
            onMondays=common_data["onMondays"],
            onTuesdays=common_data["onTuesdays"],
            onWednesdays=common_data["onWednesdays"],
            onThursdays=common_data["onThursdays"],
            onFridays=common_data["onFridays"],
            onSaturdays=common_data["onSaturdays"],
            onSundays=common_data["onSundays"]
        )
        message_id = db.cursor.lastrowid
    else:
        db.add_msg_discord(
            id_user=common_data["id_user"],
            webhook=user_data["webhook"],
            msg=common_data["msg"],
            name_user=common_data["name_user"],
            time=common_data["time"],
            date=common_data["date"],
            buttons=common_data["buttons"],
            onMondays=common_data["onMondays"],
            onTuesdays=common_data["onTuesdays"],
            onWednesdays=common_data["onWednesdays"],
            onThursdays=common_data["onThursdays"],
            onFridays=common_data["onFridays"],
            onSaturdays=common_data["onSaturdays"],
            onSundays=common_data["onSundays"]
        )
        message_id = db.cursor.lastrowid

    if "image_file_id" in user_data:
        try:
            file = await bot.get_file(user_data["image_file_id"])
            file_path = file.file_path
            image_filename = f"{message_id}.png"
            image_path = images_dir / image_filename

            await bot.download_file(file_path, destination=image_path)

            if user_data["platform"] == "telegram":
                db.update_field("telegram", message_id, "image", image_filename)
            else:
                db.update_field("discord", message_id, "image", image_filename)
        except:
            print('–Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')

    response_text = (
        "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {user_data['platform'].capitalize()}\n"
        f"<b>–¢–∏–ø:</b> {'–†–µ–≥—É–ª—è—Ä–Ω–æ–µ' if user_data['message_type'] == 'recurring' else '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ'}\n"
        f"<b>–í—Ä–µ–º—è:</b> {user_data['time']}\n"
    )

    if user_data.get("date"):
        response_text += f"<b>–î–∞—Ç–∞:</b> {user_data['date']}\n"
    is_recurring = user_data['message_type'] == 'recurring'
    if is_recurring:
        selected_days = json.loads(user_data['selected_days']) if user_data['selected_days'] else {}
        days_names = {
            "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "wednesday": "–°—Ä–µ–¥–∞",
            "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "saturday": "–°—É–±–±–æ—Ç–∞",
            "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        active_days = [days_names[day] for day, active in selected_days.items() if active]
        if active_days:
            response_text += f"<b>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</b> {', '.join(active_days)}\n"

    preview_length = 100
    if len(original_text) > preview_length:
        preview_text = f'{original_text[:preview_length]}...'
    else:
        preview_text = original_text

    response_text += f"<b>–¢–µ–∫—Å—Ç:</b>\n<code>{html.quote(preview_text)}</code>"

    if buttons:
        buttons_preview = "\n".join([f"{btn['text']} - {btn.get('url', '–∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏')}" for btn in buttons])
        response_text += f"\n<b>–ö–Ω–æ–ø–∫–∏:</b>\n<code>{html.quote(buttons_preview)}</code>"

    await message.answer(response_text, reply_markup=kb_main, parse_mode=ParseMode.HTML)
    db.clear_user_data(message.from_user.id)


@dp.callback_query(F.data.startswith("user_feedback_"))
async def handle_feedback(callback: CallbackQuery):
    creator_id = int(callback.data.split("_")[2])

    db.update_user_data(
        user_id=callback.from_user.id,
        current_state="feedback_message_input",
        feedback_creator_id=creator_id
    )

    await callback.message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:")
    await callback.answer()


async def process_feedback_message(message: Message):
    user_data = db.get_user_data(message.from_user.id)
    creator_id = user_data.get("feedback_creator_id")

    if creator_id:
        try:
            await bot.send_message(
                chat_id=creator_id,
                text=f"üì® –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {message.from_user.full_name} (ID: {message.from_user.id}):\n\n{message.text}",
                reply_markup=feedback_reply_keyboard
            )
            await message.answer("‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—é —Ä–∞—Å—Å—ã–ª–∫–∏!")
        except Exception:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –°–æ–∑–¥–∞—Ç–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

    db.update_user_data(
        user_id=message.from_user.id,
        current_state=None,
        feedback_creator_id=None
    )


@dp.callback_query(F.data == "reply_feedback")
async def reply_to_feedback(callback: CallbackQuery):
    text = callback.message.text
    user_id = int(re.search(r"ID: (\d+)", text).group(1))

    db.update_user_data(
        user_id=callback.from_user.id,
        current_state="feedback_reply_input",
        feedback_reply_user_id=user_id
    )

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤:")
    await callback.answer()


async def process_feedback_reply(message: Message):
    user_data = db.get_user_data(message.from_user.id)
    if not user_data or user_data['current_state'] != "feedback_reply_input":
        return

    target_user_id = user_data.get("feedback_reply_user_id")

    if target_user_id:
        try:
            await bot.send_message(
                chat_id=target_user_id,
                text=f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –æ—Ç–∑—ã–≤:\n\n{message.text}"
            )
            await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        except Exception as e:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

    db.update_user_data(
        user_id=message.from_user.id,
        current_state=None,
        feedback_reply_user_id=None
    )


@dp.message()
async def support_handler(message: Message):
    id_user = message.from_user.id
    support_status = db.get_field('users', id_user, 'support_status')
    if support_status == 1:
        try:
            kb_admin = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{message.from_user.id}")],
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"close_{message.from_user.id}")]
            ])
            await bot.send_message(chat_id=SUPPORT_CHAT_ID,
                                   text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} (ID: {message.from_user.id}):\n\n{message.text}\n",
                                   reply_markup=kb_admin)
            await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    elif support_status == 2:
        try:
            kb_answer = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="support")]
            ])
            await bot.send_message(chat_id=support_id_user, text=f"–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}",
                                   reply_markup=kb_answer)
            await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {support_id_user}.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    db.update_field('users', id_user, 'support_status', 0)


@dp.callback_query()
async def start_call(callback: CallbackQuery):
    id_user = callback.from_user.id
    if callback.data == 'new_message':
        db.clear_user_data(callback.from_user.id)
        db.update_user_data(
            user_id=callback.from_user.id,
            current_state="platform_selection"
        )
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=platform_keyboard)
    if callback.data == 'support':
        db.update_field('users', id_user, 'support_status', 1)
        await callback.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
        db.update_user_data(
            user_id=callback.from_user.id,
            current_state="support_answer_input"
        )
    if callback.data == 'clear':
        db.clear_user_data(callback.from_user.id)
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main)
    if callback.data == 'back_to_platform':
        db.update_user_data(
            user_id=callback.from_user.id,
            current_state="platform_selection"
        )
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=platform_keyboard)
    if callback.data.startswith('answer_'):
        support_id_user = callback.data.split('_')[1]
        await callback.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        db.update_field('users', id_user, 'support_status', 2)
    if callback.data == 'delete_msg':
        await callback.message.delete()
    await bot.answer_callback_query(callback.id)


async def send_scheduled_messages():
    while True:
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            tg_messages = db.get_telegram_messages_to_send()
            for msg in tg_messages:
                try:
                    reply_markup = None
                    if msg.get('buttons'):
                        keyboard = []
                        for btn in msg['buttons']:
                            if 'url' in btn:
                                keyboard.append([InlineKeyboardButton(text=btn['text'], url=btn['url'])])
                            elif 'callback_data' in btn:
                                keyboard.append(
                                    [InlineKeyboardButton(text=btn['text'], callback_data=btn['callback_data'])])
                        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

                    if msg.get('image'):
                        image_path = images_dir / msg['image']
                        with open(image_path, 'rb') as photo:
                            try:
                                await bot.send_photo(
                                    chat_id=msg['chat_id'],
                                    photo=types.BufferedInputFile(photo.read(), filename=msg['image']),
                                    caption=msg['text'],
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=reply_markup
                                )
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram: {e}")
                                photo.seek(0)
                                await bot.send_photo(
                                    chat_id=msg['chat_id'],
                                    photo=types.BufferedInputFile(photo.read(), filename=msg['image']),
                                    caption=msg['text'],
                                    reply_markup=reply_markup
                                )
                    else:
                        try:
                            await bot.send_message(
                                chat_id=msg['chat_id'],
                                text=msg['text'],
                                parse_mode=ParseMode.HTML,
                                reply_markup=reply_markup
                            )
                        except:
                            await bot.send_message(
                                chat_id=msg['chat_id'],
                                text=msg['text'],
                                reply_markup=reply_markup
                            )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Discord —Å –∫–Ω–æ–ø–∫–∞–º–∏
            discord_messages = db.get_discord_messages_to_send()
            async with aiohttp.ClientSession() as session:
                for msg in discord_messages:
                    try:
                        content = re.sub(r'<[^>]+>', '', msg['text'])

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                        if msg.get('buttons'):
                            links = []
                            for btn in msg['buttons']:
                                if 'url' in btn:
                                    links.append(f"[{btn['text']}]({btn['url']})")
                                elif 'callback_data' in btn and btn['callback_data'].startswith('user_feedback_'):
                                    user_id = btn['callback_data'].split('_')[2]
                                    links.append(
                                        f"[{btn['text']}](https://t.me/TimerSendMsgBot?start=feedback_{user_id})")

                            if links:
                                content += "\n\n" + " | ".join(links)

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                        if msg.get('image'):
                            image_path = images_dir / msg['image']
                            with open(image_path, 'rb') as f:
                                form_data = aiohttp.FormData()
                                form_data.add_field('content', content)
                                form_data.add_field('file', f, filename=msg['image'])
                                await session.post(msg['webhook'], data=form_data)
                        else:
                            await session.post(msg['webhook'], json={"content": content})

                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {e}")

        await asyncio.sleep(60)


async def on_startup(dispatcher: Dispatcher):
    await restore_user_sessions()
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")


async def restore_user_sessions():
    try:
        active_users = db.get_active_sessions()
        for user_id, state in active_users:
            try:
                print(f'–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}')
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π: {e}")


async def main():
    asyncio.create_task(send_scheduled_messages())
    dp.startup.register(on_startup)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())